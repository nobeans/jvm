#!/bin/bash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

JAVA_HOME_BASE=/Library/Java/JavaVirtualMachines
JAVA6_HOME=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk

resolve_symlink() {
    local TARGET=$1

    # if target is symbolic link
    if [ -L $TARGET ]; then
        local ORIGINAL_FILEPATH=`readlink $TARGET`

        # if original is specified as absolute path
        if [ $(echo $ORIGINAL_FILEPATH | cut -c 1) = "/" ]; then
            echo "$ORIGINAL_FILEPATH"
        else
            echo "$(dirname $TARGET)/$ORIGINAL_FILEPATH"
        fi
    else
        echo "$TARGET"
    fi
}

expand_path() {
    local TARGET=$1
    if [ -d "$TARGET" ]; then
        echo $(cd $TARGET && pwd -P)
    elif [ -f "$TARGET" ]; then
        local TARGET_RESOLVED=$(resolve_symlink $TARGET)
        local FILENAME=$(basename $TARGET_RESOLVED)
        local DIR_EXPANDED="$(expand_path $(dirname $TARGET_RESOLVED))"
        echo "$DIR_EXPANDED/$FILENAME"
    else
        echo "$TARGET"
    fi
}

usage() {
    echo "Usage: `basename $0` <command> [version]"
    echo
    echo "   commands:"
    echo "       list    or ls [version]"
    echo "       default or d  [version]"
    echo "       help"
    echo
    echo "eg: jvm list"
}

die() {
    local message=$1
    [ "$message" != "" ] && echo -e "$message\n" >&2
    usage
    exit 1
}

current_version() {
    if [ ! -s $JAVA_HOME_BASE/current ]; then
        echo ""
    else
        expand_path $JAVA_HOME_BASE/current | xargs basename | sed -E "s/\.?jdk//g"
    fi
}

if [ ! -d $JAVA_HOME_BASE ]; then
    die "$JAVA_HOME_BASE not found"
fi

CMD=$1
[ "$CMD" = "" ] && die
shift

case $CMD in
    list | ls)
        echo "============================================================"
        echo "Available JVM Versions"
        echo "============================================================"
        echo
        CURRENT=`current_version`
        for VERSION in `ls -1 $JAVA_HOME_BASE | grep ".jdk" | sed -E "s/\.?jdk//g" | sort -r`
        do
            if [ "$CURRENT" = "$VERSION" ]; then
                echo -n "> * "
            else
                echo -n "  * "
            fi
            echo $VERSION
        done
        if [ -d $JAVA6_HOME ]; then
            if [ "$CURRENT" = "1.6.0" ]; then
                echo "> * 1.6 (Apple)"
            else
                echo "  * 1.6 (Apple)"
            fi
        fi
        echo
        echo "============================================================"
        echo "* - installed"
        echo "> - currently in use"
        echo "============================================================"
        ;;
    default | d)
        VERSION=$1

        # Resolve specified JDK
        if [ -z "$VERSION" ]; then
            die "No candidate provided."
        elif [[ "$VERSION" =~ ^1.6 ]]; then
            SPECIFIED_JDK_DIR=$JAVA6_HOME
        elif [ -d $JAVA_HOME_BASE/$VERSION.jdk ]; then
            SPECIFIED_JDK_DIR=$JAVA_HOME_BASE/$VERSION.jdk
        elif [ -d $JAVA_HOME_BASE/jdk$VERSION.jdk ]; then
            SPECIFIED_JDK_DIR=$JAVA_HOME_BASE/jdk$VERSION.jdk
        else
            die "java $VERSION is not available"
        fi

        # Delete current symbolic link
        if [ -h $JAVA_HOME_BASE/current ]; then
            rm $JAVA_HOME_BASE/current
        fi

        # Create new symbolic link
        ln -s $SPECIFIED_JDK_DIR $JAVA_HOME_BASE/current
        echo "Default java version set to $VERSION"
        ;;
    help)
        usage
        exit 0
        ;;
    *)
        die "Invalid command: $CMD"
        ;;
esac

